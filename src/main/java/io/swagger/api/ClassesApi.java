/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ClassesList;
import io.swagger.model.ErrorResponse;
import io.swagger.model.ModelClass;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-30T23:06:14.797-07:00")

@Api(value = "classes", description = "the classes API")
public interface ClassesApi {

    @ApiOperation(value = "Adds a new class", nickname = "addClass", notes = "", response = ModelClass.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ModelClass.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/classes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ModelClass> addClass(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ModelClass body);


    @ApiOperation(value = "Delete class by Id", nickname = "deleteClassById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/classes/{classId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteClassById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the class to be deleted",required=true) @PathVariable("classId") String classId);


    @ApiOperation(value = "Retrieves class by Id", nickname = "getClassById", notes = "", response = ModelClass.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ModelClass.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/classes/{classId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ModelClass> getClassById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the class to be retrieved",required=true) @PathVariable("classId") String classId);


    @ApiOperation(value = "Retrieves classes", nickname = "getClasses", notes = "", response = ClassesList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ClassesList.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/classes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ClassesList> getClasses(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Course Tags to be used as filter classes - comma seperated list of tags") @Valid @RequestParam(value = "courseTags", required = false) String courseTags);


    @ApiOperation(value = "Updates a class", nickname = "updateClass", notes = "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/classes/{classId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateClass(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the class to be updated",required=true) @PathVariable("classId") String classId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ModelClass body);

}
