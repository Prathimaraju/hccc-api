/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Course;
import io.swagger.model.CoursesList;
import io.swagger.model.ErrorResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-30T23:06:14.797-07:00")

@Api(value = "courses", description = "the courses API")
public interface CoursesApi {

    @ApiOperation(value = "Adds a new course", nickname = "addCourse", notes = "", response = Course.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Course.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/courses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Course> addCourse(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Course body);


    @ApiOperation(value = "Delete course by Id", nickname = "deleteCourseById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/courses/{courseId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCourseById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the course to be deleted",required=true) @PathVariable("courseId") String courseId);


    @ApiOperation(value = "Retrieves course by Id", nickname = "getCourseById", notes = "", response = Course.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Course.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/courses/{courseId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Course> getCourseById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the course to be retrieved",required=true) @PathVariable("courseId") String courseId);


    @ApiOperation(value = "Retrieves courses", nickname = "getCourses", notes = "", response = CoursesList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CoursesList.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/courses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<CoursesList> getCourses(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Tags to be used as filter - comma seperated list of tags") @Valid @RequestParam(value = "courseTags", required = false) String courseTags);


    @ApiOperation(value = "Updates a course", nickname = "updateCourse", notes = "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/courses/{courseId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateCourse(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the course to be updated",required=true) @PathVariable("courseId") String courseId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Course body);

}
