/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.IndemnityForm;
import io.swagger.model.IndemnityFormsList;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-30T23:06:14.797-07:00")

@Api(value = "indemnityForms", description = "the indemnityForms API")
public interface IndemnityFormsApi {

    @ApiOperation(value = "Adds a new indemnity form", nickname = "addIndemnityForm", notes = "", response = IndemnityForm.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IndemnityForm.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/indemnityForms",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<IndemnityForm> addIndemnityForm(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody IndemnityForm body);


    @ApiOperation(value = "Delete indemnity form by Id", nickname = "deleteIndemnityFormrById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/indemnityForms/{indemnityFormId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteIndemnityFormrById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the indemnity form to be deleted",required=true) @PathVariable("indemnityFormId") String indemnityFormId);


    @ApiOperation(value = "Retrieves indemnity form by Id", nickname = "getIndemnityFormById", notes = "", response = IndemnityForm.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IndemnityForm.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/indemnityForms/{indemnityFormId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<IndemnityForm> getIndemnityFormById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the indemnity from to be retrieved",required=true) @PathVariable("indemnityFormId") String indemnityFormId);


    @ApiOperation(value = "Retrieves list of indemnity forms", nickname = "getIndemnityForms", notes = "", response = IndemnityFormsList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IndemnityFormsList.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/indemnityForms",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<IndemnityFormsList> getIndemnityForms(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName);


    @ApiOperation(value = "Updates an indemnity form", nickname = "updateIndemnityForm", notes = "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/indemnityForms/{indemnityFormId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateIndemnityForm(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the indemnity form to be updated",required=true) @PathVariable("indemnityFormId") String indemnityFormId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody IndemnityForm body);

}
