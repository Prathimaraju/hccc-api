/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DevoteeDetails;
import io.swagger.model.DevoteesList;
import io.swagger.model.Enrollment;
import io.swagger.model.EnrollmentsList;
import io.swagger.model.ErrorResponse;
import io.swagger.model.IndemnitiesList;
import io.swagger.model.Indemnity;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-30T23:06:14.797-07:00")

@Api(value = "devotees", description = "the devotees API")
public interface DevoteesApi {

    @ApiOperation(value = "Adds a new enrollment", nickname = "addEnrollment", notes = "", response = Enrollment.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Enrollment.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/enrollments",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Enrollment> addEnrollment(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the account to be retrieved",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Enrollment body);


    @ApiOperation(value = "Adds a new indemnity", nickname = "addIndemnity", notes = "", response = Indemnity.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Indemnity.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/indemnities",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Indemnity> addIndemnity(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Indemnity body);


    @ApiOperation(value = "Delete enrollment by Id", nickname = "deleteEnrollmentById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/enrollments/{enrollmentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEnrollmentById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "Id of the enrollment to be deleted",required=true) @PathVariable("enrollmentId") String enrollmentId);


    @ApiOperation(value = "Delete indemnity by Id", nickname = "deleteIndemnityById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/indemnities/{indemnityId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteIndemnityById(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "Id of the indemnity to be deleted",required=true) @PathVariable("indemnityId") String indemnityId);


    @ApiOperation(value = "Gets devotee by Id", nickname = "getDevotee", notes = "", response = DevoteeDetails.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DevoteeDetails.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DevoteeDetails> getDevotee(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee to be retrieved",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "?include=familyMember will return devotee devotee information with family members details") @Valid @RequestParam(value = "include", required = false) String include);


    @ApiOperation(value = "Retrieves Devotees", nickname = "getDevotees", notes = "", response = DevoteesList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DevoteesList.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DevoteesList> getDevotees(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "?include=familyMember will return devotee devotee information with family members details") @Valid @RequestParam(value = "include", required = false) String include,@ApiParam(value = "If a phone number is passed in query string, the results will be filtered by accounts mobile number") @Valid @RequestParam(value = "phoneNumber", required = false) String phoneNumber,@ApiParam(value = "If a role is passed in query string, the results will be filtered by roles") @Valid @RequestParam(value = "role", required = false) String role);


    @ApiOperation(value = "get enrollment by id", nickname = "getEnrollment", notes = "", response = Enrollment.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Enrollment.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/enrollments/{enrollmentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Enrollment> getEnrollment(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "Id of the enrollment to be retrieved",required=true) @PathVariable("enrollmentId") String enrollmentId);


    @ApiOperation(value = "Retrieves enrollments.", nickname = "getEnrollments", notes = " Only enrollments belonging to the requesting user account will be returned. User Account information is available in the header.", response = EnrollmentsList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EnrollmentsList.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/enrollments",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<EnrollmentsList> getEnrollments(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee account whose enrollments are to be retrieved",required=true) @PathVariable("devoteeId") String devoteeId);


    @ApiOperation(value = "Retrieves indemnities", nickname = "getIndemnities", notes = "Only indemnities belonging to the requesting user account will be returned. User Account information is available in the header.", response = IndemnitiesList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = IndemnitiesList.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/indemnities",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<IndemnitiesList> getIndemnities(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee account whose indemnities are to be retrieved",required=true) @PathVariable("devoteeId") String devoteeId);


    @ApiOperation(value = "get indemnity by id", nickname = "getIndemnity", notes = "", response = Indemnity.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Indemnity.class),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/indemnities/{indemnityId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Indemnity> getIndemnity(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "Id of the indemnity to be retrieved",required=true) @PathVariable("indemnityId") String indemnityId);


    @ApiOperation(value = "Updates an enrollment", nickname = "updateEnrollment", notes = "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/enrollments/{enrollmentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateEnrollment(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "Id of the enrollment to be retrieved",required=true) @PathVariable("enrollmentId") String enrollmentId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Enrollment body);


    @ApiOperation(value = "Updates an indemnity", nickname = "updateIndemnity", notes = "Body of the PATCH request must conform to JSON Merge Patch specification outlined in RFC7396", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request - some of the input parameters are incorrect or invalid", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - the devotee does not have permissions to call this endpoint", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/devotees/{devoteeId}/indemnities/{indemnityId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateIndemnity(@ApiParam(value = "Unique identifier of the devotee's account" ,required=true) @RequestHeader(value="User-Name", required=true) String userName,@ApiParam(value = "Id of the devotee",required=true) @PathVariable("devoteeId") String devoteeId,@ApiParam(value = "Id of the indemnity to be retrieved",required=true) @PathVariable("indemnityId") String indemnityId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Indemnity body);

}
